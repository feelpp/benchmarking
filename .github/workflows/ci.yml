name: CI

on:
  push:
    branches:
      - '**' # Push events on all branches
    paths-ignore:
      - '.github/workflows/init.yml'
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10 including semver

  pull_request:
    branches:
      - '**' # Pull request events on all branches

  workflow_dispatch:
    inputs:
      machine:
        description: 'Name of the supercomputer where the benchmark ran'
        required: true
        default: 'gaya'
      application:
        description: 'Name of the benchmarked application'
        required: true
        default: 'feelpp_toolbox_electric'
      test_case:
        description: 'Name of the test case'
        required: true
        default: 'default'
      benchmark_remote_folder_id:
        description: 'Girder folder id where the benchmark results are stored'
        required: true
      data_management_platform:
        type: choice
        description: 'Name of the data management platform'
        default: 'girder'
        options:
          - girder
          - ckan

  repository_dispatch:
    types: [benchmark-uploaded]

jobs:

  build_wheel:
    runs-on: self-ubuntu-22.04
    name: Build wheel
    if:  "!contains(github.event.head_commit.message, 'wheel skip')"
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true
        submodules: 'recursive'
    - name: Create Virtual Environment
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install -I -r requirements.txt
    - name: Compile
      run: |
        pip3 wheel --no-deps --wheel-dir dist .
      env:
        CXX: clang++

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: wheel-artifacts
        path: dist/*.whl

  update_config:
    runs-on: self-ubuntu-22.04
    name: Update config
    needs: build_wheel
    if: (github.event_name == 'repository_dispatch') || (github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v4
      - name: Create Virtual Environment
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install girder_client
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: wheel-artifacts
          path: dist
      - name: Install wheel
        run: |
          source .venv/bin/activate
          python3 -m pip install --force-reinstall dist/*.whl

      - name: Set inputs
        id: set-inputs
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "machine=${{ github.event.inputs.machine }}" >> $GITHUB_OUTPUT
            echo "application=${{ github.event.inputs.application }}" >> $GITHUB_OUTPUT
            echo "test_case=${{ github.event.inputs.test_case }}" >> $GITHUB_OUTPUT
            echo "benchmark_remote_folder_id=${{ github.event.inputs.benchmark_remote_folder_id }}" >> $GITHUB_OUTPUT
            echo "data_management_platform=${{ github.event.inputs.data_management_platform }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "machine=${{ github.event.client_payload.machine }}" >> $GITHUB_OUTPUT
            echo "application=${{ github.event.client_payload.application }}" >> $GITHUB_OUTPUT
            echo "test_case=${{ github.event.client_payload.test_case }}" >> $GITHUB_OUTPUT
            echo "benchmark_remote_folder_id=${{ github.event.client_payload.benchmark_remote_folder_id }}" >> $GITHUB_OUTPUT
            echo "data_management_platform=${{ github.event.client_payload.data_management_platform }}" >> $GITHUB_OUTPUT
          fi

      - name: Update config
        run: |
          source .venv/bin/activate
          echo "TO DO"
        env:
          GIRDER_API_KEY: ${{ secrets.GIRDER }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Add/Update benchmark for ${{ steps.set-inputs.outputs.application }} on ${{ steps.set-inputs.outputs.machine }}"
          body: |
            Add/Update benchmark:
            - Application ${{ steps.set-inputs.outputs.application }}
            - Machine ${{ steps.set-inputs.outputs.machine }}
            - Test case ${{ steps.set-inputs.outputs.test_case }}

            Auto-generated by [create-pull-request][1]
            [1]: https://github.com/peter-evans/create-pull-request
          labels: |
            enhancement
            documentation
          reviewers: JavierCladellas
        env:
          GITHUB_TOKEN: ${{ secrets.CR_PAT }}

  update_benchmarks:
    runs-on: self-ubuntu-22.04
    name: Update benchmarks
    needs: update_config
    if: "!contains(github.event.head_commit.message, 'benchmarks skip') && (github.event_name == 'pull_request')"
    steps:
      - name: Download
        uses: actions/download-artifact@v3
        with:
          name: wheel-artifacts
      - name: Install
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip3 install -I -r requirements.txt
          pip3 install dist/*.whl
      - name: Update
        run: |
          source .venv/bin/activate
          render-benchmarks \
            --config_file ./src/feelpp/benchmarking/report/config.json \
            --json_output_path reports \
            --modules_path ./docs/modules/ROOT/pages
        env:
          GIRDER_API_KEY: ${{ secrets.GIRDER }}
      - name: Push benchmarks
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Add/Update benchmarks"
          branch: ${{ github.head_ref }}
          file_pattern: "docs/modules/**"

  docs:
    runs-on: self-ubuntu-22.04
    name: Build Antora Site
    needs: build_wheel
    if: "!contains(github.event.head_commit.message, 'docs skip')"
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        submodules: 'recursive'
    - name: Install credentials
      run: echo https://$GITHUB_OAUTH:@github.com > $HOME/.git-credentials
      env:
        GITHUB_OAUTH: ${{ secrets.CR_PAT_WORKFLOW }}
    - name: Install NPM dependencies
      run: npm install
    - name: Download
      uses: actions/download-artifact@v3
      with:
        name: wheel-artifacts
        path: dist/
    - name: Install Python dependencies
      run: |
          python -m venv .venv
          source .venv/bin/activate
          pip3 install -I -r requirements.txt
          pip3 install dist/*.whl
          tree .venv
    - name: Build Antora Site
      run: |
          source .venv/bin/activate
          npm run antora
    - name: Deploy
      if: ${{ github.ref_name == 'master' }}
      uses: JamesIves/github-pages-deploy-action@v4
      with:
          branch: gh-pages # The branch the action should deploy to.
          folder: public # The folder the action should deploy.

  build_code:
    runs-on: self-ubuntu-22.04
    name: Build, Install, Package code
    if: "!contains(github.event.head_commit.message, 'code skip')"
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true
        submodules: 'recursive'
    - name: Build
      run: |
        cmake --preset default
        cmake --build --preset default
    - name: Check
      run: |
        ctest --preset default
      env:
        OMPI_ALLOW_RUN_AS_ROOT: 1
        OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
    - name: Package
      run: |
        cmake --build --preset default -t package
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: benchmarking-artifacts
        path: build/default/assets/benchmarking-*

  deliver:
    runs-on: self-ubuntu-22.04
    needs: build_code
    name: Build docker, tag and push
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        submodules: 'recursive'
    - name: Download
      uses: actions/download-artifact@v3
      with:
        # Artifact name
        name: benchmarking-artifacts
        path: artifacts/
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/feelpp/benchmarking
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: artifacts
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: ./Dockerfile

  release:
    runs-on: self-ubuntu-22.04
    name: Release
    needs: [build_wheel, build_code]
    if: startsWith(github.ref ,'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          submodules: 'recursive'
      - name: Download Deb Packages
        uses: actions/download-artifact@v3
        with:
          name: benchmarking-artifacts
          path: artifacts/
      - name: Download Wheel Packages
        uses: actions/download-artifact@v3
        with:
          name: wheel-artifacts
          path: dist/
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.deb
            dist/*.whl
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc')}}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          tag_name: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
