= Reframe Report for {{application_display_name}} on {{ machine_display_name }}
:page-plotly: true
:page-jupyter: true
:page-tags: toolbox, catalog
:parent-catalogs: {{parent_catalogs}}
:description: Performance report for {{ machine_display_name }} on {{ session_info.time_end }}
:page-illustration: {{ machine_id }}.jpg
:author: Your Name
:revdate: {{ session_info.time_end }}

== Test Summary

* Total Tests: {{ session_info.num_cases }}
* Failures: {{ session_info.num_failures }}
* Testcases
{% set env_vars=[] %}
{% for run in runs %}
    {% for test in run.testcases %}
        ** {{ test.display_name }}
        {% if env_vars == [] and test.check_vars.env_vars %}
            {% set _ignore=env_vars.append(test.check_vars.env_vars) %}
        {% endif %}
    {% endfor %}
{% endfor %}
{% if env_vars %}
* Environment variables:
[source,json]
----
{{ env_vars[0] }}
----
{% endif %}

[%dynamic%close%hide_code,python]
----
from feelpp.benchmarking.report.components.controllers.atomicReportController import AtomicReportController
from feelpp.benchmarking.report.components.models.atomicReportModel import AtomicReportModel
from feelpp.benchmarking.report.components.views.atomicReportView import AtomicReportView
from feelpp.benchmarking.report.components.strategies import PerformanceStrategy, SpeedupStrategy
----

[%dynamic%close%hide_code,python]
----
model=AtomicReportModel("{{ filepath }}")
view=AtomicReportView()
controller=AtomicReportController(model,view)
----

=== Performance by Simulation Steps

[%dynamic%close%hide_code,python]
----
performance_strategy=PerformanceStrategy("s",["nb_task"])
----

[%dynamic%raw%open%hide_code,python]
----
fig=controller.generatePerformancePlot(performance_strategy)
fig.show()
----

[%dynamic%raw%open%hide_code,python]
----
fig=controller.generatePerformanceTable(performance_strategy)
fig.show()
----

=== Speedup of the simulation Steps

[%dynamic,python]
----
speedup_strategy=SpeedupStrategy("nb_task")
----

.Speedup
[%dynamic%raw%open%hide_code,python]
----
fig=controller.generateSpeedupPlot(speedup_strategy)
fig.show()
----

[%dynamic%raw%open%hide_code,python]
----
fig=controller.generateSpeedupTable(speedup_strategy)
fig.show()
----

=== Speedup for partial performances

[%dynamic%raw%open%hide_code,python]
----
if model.is_partial:
    for stage_name in model.stages:
        speedup_strategy=SpeedupStrategy(dimension="nb_task", stage=stage_name)
        fig=controller.generateSpeedupPlot(speedup_strategy)
        fig.show()
else:
    print("Performances of each part inside an execution step have not been recorded yet.")
----