= Reframe Report for {{application_display_name}} on {{ machine_display_name }}
:page-plotly: true
:page-jupyter: true
:page-tags: toolbox, catalog
:parent-catalogs: {{parent_catalogs}}
:description: Performance report for {{ machine_display_name }} on {{ session_info.time_start }}
:page-illustration: {{ machine_id }}.jpg
:author: Your Name
:revdate: {{ session_info.time_end }}


{% if description_path %}
== Case Description

include::ROOT:{{description_path}}[leveloffset=+1]
{% endif %}


== Test Summary

* Total Tests: {{ session_info.num_cases }}
* Failures: {{ session_info.num_failures }}

{% if not empty %}

|===
{% for header in hash_params_headers %} | {% if header == 'partial_filepath' %} {% else %} {{ header }} {% endif %} {% endfor %}

{% for entry in flat_hash_param_map.values() %}
{% for header in hash_params_headers %}
  {% if header == 'partial_filepath' %} | xref:{{ entry.get(header, '') }}[Description] {% else %} | {{ entry.get(header, '') }} {% endif %}
{% endfor %}

{% endfor %}
|===

{% for figure,csv in zip(figures,figure_csvs) %}
++++
<button id="download-csv-{{parent_catalogs}}-{{loop.index}}" > CSV </button>

{{figure}}

<script>
const csvData_{{loop.index}} = `{{csv | safe}}`;

document.getElementById('download-csv-{{parent_catalogs}}-{{loop.index}}').addEventListener('click', function() {
    const blob = new Blob([csvData_{{loop.index}}], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'data.csv'; // Desired file name
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
});

</script>
++++
{% endfor %}

{% endif %}